package com.geertenvink.Bardiche;

import java.util.Collection;

import com.stephengware.java.planware.State;
import com.stephengware.java.planware.logic.Entity;
import com.stephengware.java.planware.logic.Expression;
import com.stephengware.java.planware.logic.Literal;
import com.stephengware.java.planware.logic.ModalExpression;
import com.stephengware.java.planware.logic.Substitution;

public class Possibility extends ModalExpression implements Literal {
	public static final String POSSIBILITY_MODALITY = "possible";
	public final Expression argument;
	
	public Possibility(Expression argument) {
		super(POSSIBILITY_MODALITY, argument);
		this.argument = argument;
	}

	@Override
	public boolean isTestable() {
		return true;
	}	
	
	public boolean test(State state) {
		try {
			return PossibilityChecker.test(argument, state);
		} catch (InitializationException e) {
			e.printStackTrace();
			return false; // if somehow the possibilitychecker is not initialized, return false
		}
	}




	@Override
	public Expression substitute(Substitution substitution) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean isImposable() {
		// TODO Auto-generated method stub
		return false;
	}




	@Override
	public boolean impose(State state) {
		// TODO Auto-generated method stub
		return false;
	}




	@Override
	public Expression toCNF() {
		// TODO Auto-generated method stub
		return null;
	}




	@Override
	public Expression toDNF() {
		// TODO Auto-generated method stub
		return null;
	}




	@Override
	public <E extends Entity> void collect(Class<E> entityType,
			Collection<E> collection) {
		// TODO Auto-generated method stub
		
	}




	@Override
	public Literal negate() {
		// TODO Auto-generated method stub
		return null;
	}
}
