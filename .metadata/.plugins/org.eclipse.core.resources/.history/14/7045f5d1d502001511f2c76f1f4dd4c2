package com.geertenvink.Bardiche;

import java.util.LinkedList;
import java.util.List;

import com.stephengware.java.planware.FormatException;
import com.stephengware.java.planware.State;
import com.stephengware.java.planware.logic.Expression;
import com.stephengware.java.planware.logic.NAryBooleanExpression;
import com.stephengware.java.planware.logic.Substitution;

public class ExclusiveDisjunction extends NAryBooleanExpression {
	protected static final String EXCLUSIVEDISJUNCTION_PREDICATE = "xor";
	
	public ExclusiveDisjunction(Expression...arguments) {
		super(EXCLUSIVEDISJUNCTION_PREDICATE, flatten(arguments));
		if (arguments.length < 2)
			throw new FormatException(getDescription(), "2 or more arguments required.");
	}
	
	private static final Expression[] flatten(Expression[] arguments) {
		LinkedList<Expression> flat = new LinkedList<>();
		for (Expression argument : arguments) {
			if (argument instanceof ExclusiveDisjunction) {
				for (Expression innerArgument : ((ExclusiveDisjunction) argument).arguments)
					flat.add(innerArgument);
			}
			else flat.add(argument);
		}
		return flat.toArray(new Expression[flat.size()]);
	}
	
	public ExclusiveDisjunction(List<? extends Expression> arguments) {
		this(arguments.toArray(new Expression[arguments.size()]));
	}
	
	@Override
	public Expression substitute(Substitution substitution) {
		Expression lastTruthValue = null;
		
		Expression substituted = substitution.substitute(this, Expression.class);
		if (this != substituted)
			return substituted;
		LinkedList<Expression> substitutedArguments = new LinkedList<>();
		boolean different = false;
		for (Expression argument : arguments) {
			Expression transformedArgument = argument.substitute(substitution);
			// if the transformed argument is a truth value, xor it with the stored
			// truth value, or just store it if no such argument exists.
			if (transformedArgument == Expression.TRUE ||
					transformedArgument == Expression.FALSE) {
				if (lastTruthValue == null) {
					lastTruthValue = Expression.TRUE;
				}
				else if (lastTruthValue == transformedArgument) {
					lastTruthValue = Expression.FALSE;
				}
				else lastTruthValue = Expression.TRUE;
				
				different = true;
				continue;
			}
			if (argument != transformedArgument)
				different = true;
			substitutedArguments.add(transformedArgument);
		}
		
		// add any stored truth value to the argument list
		if (lastTruthValue != null) {
			substitutedArguments.add(lastTruthValue);
		}
		
		if (!different) return this;
		
		if (substitutedArguments.size() == 1)
			return substitutedArguments.get(0);
		else return new ExclusiveDisjunction(substitutedArguments).substitute(substitution);
	}
	
	@Override
	public boolean test(State state) {
		boolean result = arguments.get(0).test(state);
		for (int i = 1; i < arguments.length; i++)
			result = arguments.get(i).test(state) ^ result;
		
		return result;
	}
}
