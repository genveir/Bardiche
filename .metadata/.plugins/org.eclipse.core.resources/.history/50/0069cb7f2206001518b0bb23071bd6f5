package com.geertenvink.Bardiche;

import com.stephengware.java.planware.State;
import com.stephengware.java.planware.logic.Conjunction;
import com.stephengware.java.planware.logic.Disjunction;
import com.stephengware.java.planware.logic.Expression;
import com.stephengware.java.planware.logic.Negation;
import com.stephengware.java.planware.logic.Predication;

public class CertaintyChecker {
	public static boolean isCertain(Expression subGoal, State state) {
		// an expression not caught by a more specific method is an unknown.
		// we will return false because we don't know if it's value may
		// change in the future.
		return false;
	}
	
	public static boolean isCertain(Predication subGoal, State state) {
		// the only predicates allowed in bardiche goals are goals that
		// are irreversible and reachable. So a predicate that is true
		// is certain, no other predicate is.
		
		// SCRIPTIE eigenlijk zou er gekeken moeten worden of er een
		// agent is die het ook echt kan doen. Nu moeten we forcen dat
		// de state bereikbaar is.
		return subGoal.test(state);
	}
	
	public static boolean isCertain(Conjunction subGoal, State state) {
		// a conjunction is certain if each of its arguments is
		// certain.
		for (Expression argument : subGoal.arguments) {
			if (!isCertain(argument, state)) return false;
		}
		return true;
	}
	
	public static boolean isPossible(Disjunction subGoal, State state) {
		// a disjunction is certain if one of its arguments is certain.
		for (Expression argument : subGoal.arguments) {
			if (isCertain(argument, state)) return true;
		}
		return false;
	}
	
	public static boolean isPossible(ExclusiveDisjunction subGoal, State state) {
		for (Expression argument : subGoal.arguments) {
			boolean result = true;
			if (isPossible(argument, state)) {
				for (Expression otherArgument : subGoal.arguments) {
					if (argument == otherArgument) continue;
					
					if (!isPossible(otherArgument.negate(), state)) {
						result = false;
						break;
					}
				}
			}
			if (result) return true;
		}
		return false;
	}
	
	public static boolean isPossible(Negation subGoal, State state) {
		return !CertaintyChecker.isCertain(subGoal.argument, state);
	}
}
