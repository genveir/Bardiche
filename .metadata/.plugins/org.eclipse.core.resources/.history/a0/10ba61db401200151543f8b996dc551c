package com.geertenvink.Bardiche;

import java.util.ArrayList;

import com.stephengware.java.cpocl.Utilities;
import com.stephengware.java.glaive.GlaivePlan;
import com.stephengware.java.glaive.StepEvent;
import com.stephengware.java.planware.ArgumentMap;
import com.stephengware.java.planware.logic.Constant;

public class BardichePlan extends GlaivePlan {
	public final Constant protagonist;
	
	public final boolean complete;
	private final int completedSteps;
	public final ArrayList<BardicheStep> executedSteps;
	public final BardicheStep lastStep;
	
	public BardichePlan(ArgumentMap arguments) {
		super("Bardiche Final Plan", arguments.get(Bardiche.PROBLEM), arguments.get(Bardiche.AXIOM_TREE));
		protagonist = arguments.get(Bardiche.PROBLEM).protagonist;
		
		this.executedSteps = new ArrayList<>();
		setStepsFromStepsList();
		
		this.complete = false;
		this.completedSteps = executedSteps.size();
		this.lastStep = null;
	}
	
	public BardichePlan(GlaivePlan plan, ArgumentMap arguments, int completedSteps) {
		super(plan.name, arguments.get(Bardiche.PROBLEM), arguments.get(Bardiche.AXIOM_TREE));
		protagonist = arguments.get(Bardiche.PROBLEM).protagonist;
		
		setSteps(plan);
		this.completedSteps = completedSteps;
		executedSteps = getExecutedSteps();
		if (executedSteps.size() != 0)
			lastStep = executedSteps.get(executedSteps.size() -1);
		else
			lastStep = null;
		complete = getComplete(arguments, plan);
	}
	
	private boolean getComplete(ArgumentMap arguments, GlaivePlan plan) {
		GlaivePlan executedPlan;
		if (lastStep == null) 
			executedPlan = plan;
		else {
			boolean protagonistInLastStep = stepContainsProtagonist(lastStep);
			executedPlan = getExecutedPlan(arguments, !protagonistInLastStep);
			if (completedSteps < executedSteps.size() && protagonistInLastStep) return false;
		}
		
		return executedPlan.getCurrentState().isTrue(arguments.get(Bardiche.PROBLEM).goal);
	}
	
	public GlaivePlan getExecutedPlan(ArgumentMap arguments, boolean getSuggestion) {
		int suggestionModifier = (getSuggestion) ? 0 : -1;
		int planSize = executedSteps.size() + suggestionModifier;
		
		if (planSize < completedSteps) planSize = completedSteps;
		
		GlaivePlan executedPlan = new GlaivePlan(name, problem, arguments.get(Bardiche.AXIOM_TREE));
		
		for(int numSteps = 0; numSteps < planSize; numSteps++) {
			BardicheStep step = executedSteps.get(numSteps);
			executedPlan.addStep(step);
		}
		
		return executedPlan;
	}
	
	private void setSteps(GlaivePlan plan) {
		StepsList.clear();
		for (StepEvent step : Utilities.getSteps(plan)) {
			if (Utilities.isExecuted(step, plan)) {
				addStep(step.source);
				StepsList.addStep((BardicheStep) step.source);
			}
		}
	}
	
	private void setStepsFromStepsList() {
		for (BardicheStep step : StepsList.steps) {
			executedSteps.add(step);
		}
	}
	
	private final ArrayList<BardicheStep> getExecutedSteps() {
		int numSteps = 0;
		ArrayList<BardicheStep> steps = new ArrayList<BardicheStep>();
		
		for(StepEvent step : Utilities.getSteps(this)){
			BardicheStep bardicheStep = (BardicheStep) step.source;

			if (!Utilities.isExecuted(step, this)) {
				continue;
			} else {
				numSteps++;
			}
			
			if (numSteps <= completedSteps || 
					(!stepContainsProtagonist(bardicheStep))) {
				steps.add(bardicheStep);
			}
			else {
				steps.add(bardicheStep);
				break;
			}
		}
		
		return steps;
	}
	
	private boolean stepContainsProtagonist(BardicheStep step) {
		return step.agents.contains(protagonist) || step.initiator == protagonist;
	}
}
