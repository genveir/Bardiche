package com.geertenvink.Bardiche;

import com.stephengware.java.glaive.GlaivePlan;
import com.stephengware.java.planware.ArgumentMap;
import com.stephengware.java.planware.AxiomTree;
import com.stephengware.java.planware.logic.Constant;

public class BardichePlan extends GlaivePlan {
	public final Constant protagonist;
	
	public final boolean complete;
	
	private final int suggestedStepTime;
	private final AxiomTree axiomTree;
	
	// used to generate a plan for output
	public BardichePlan(ArgumentMap arguments) {
		super("Bardiche Final Plan", arguments.get(Bardiche.PROBLEM), arguments.get(Bardiche.AXIOM_TREE));
		protagonist = arguments.get(Bardiche.PROBLEM).protagonist;
		
		setStepsFromStepsList();
		
		this.complete = true;
		this.suggestedStepTime = -1;
		this.axiomTree = arguments.get(Bardiche.AXIOM_TREE);
	}
	
	public BardichePlan(GlaivePlan plan, ArgumentMap arguments) {
		super(plan.name, arguments.get(Bardiche.PROBLEM), arguments.get(Bardiche.AXIOM_TREE));
		protagonist = arguments.get(Bardiche.PROBLEM).protagonist;
		
		this.axiomTree = arguments.get(Bardiche.AXIOM_TREE);
		
		setSteps(plan);
		suggestedStepTime = getSuggestedStepTime();
		complete = getComplete();
	}
	
	private final boolean getComplete() {
		return (suggestedStepTime == -1);
	}
	
	public BardicheStep getSuggestedStep() {
		return (BardicheStep) getStep(suggestedStepTime).source;
	}
	
	public GlaivePlan getExecutedPlan() {		
		System.out.println("---"); //SCRIPTIE
		System.out.println("getExecutedPlan"); //SCRIPTIE
		
		GlaivePlan executedPlan;
		
		if (complete) executedPlan = this;
		else {
			 executedPlan = new GlaivePlan(name, problem, axiomTree);
			
			for(int time = 1; time <= suggestedStepTime; time++) {
				BardicheStep step = (BardicheStep) getStep(time).source;
				System.out.println("adding step " + step); //SCRIPTIE
				executedPlan.addStep(step);
			}
		}
		System.out.println("---"); //SCRIPTIE
		
		return executedPlan;
	}
	
	// we're only looking for those steps which are in the main plan
	private void setSteps(GlaivePlan plan) {
		for (int time = 1; time <= plan.getCurrentTime(); time++) {
			addStep(plan.getStep(time).source);
		}
	}
	
	private void setStepsFromStepsList() {
		for (BardicheStep step : StepsList.steps) {
			addStep(step);
		}
	}
	
	// get the time for the first step that is not executed in the Bardiche sense
	private final int getSuggestedStepTime() {
		for (int time = 1; time <= getCurrentTime(); time++) {
			BardicheStep bardicheStep = (BardicheStep) getStep(time).source;
			
			if (stepContainsProtagonist(bardicheStep) && !bardicheStep.isApproved())
				return time;
		}
		return -1;
	}
	
	private boolean stepContainsProtagonist(BardicheStep step) {
		return step.agents.contains(protagonist) || step.initiator == protagonist;
	}
}
