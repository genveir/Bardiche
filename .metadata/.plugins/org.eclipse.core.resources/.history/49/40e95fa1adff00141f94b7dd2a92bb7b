package com.geertenvink.Bardiche;

import com.stephengware.java.planware.State;
import com.stephengware.java.planware.logic.*;

public class PossibilityChecker {
	public static boolean isPossible(Expression subGoal, State state) {
		// an expression not caught by a more specific method is an unknown.
		// we will return false unless the expression evaluates to true, 
		// since in that case it's possible.
		return subGoal.test(state);
	}
	
	public static boolean isPossible(Predication subGoal, State state) {
		// the only predicates allowed in bardiche goals are goals that
		// are irreversible and reachable. So any predicate in a goal
		// is possible.
		return true;
	}
	
	public static boolean isPossible(Conjunction subGoal, State state) {
		// a conjunction is possible if each of it's arguments is
		// possible.
		for (Expression argument : subGoal.arguments) {
			if (!isPossible(argument, state)) return false;
		}
		return true;
	}
	
}
