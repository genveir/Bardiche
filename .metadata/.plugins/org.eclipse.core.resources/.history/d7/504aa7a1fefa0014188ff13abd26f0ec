package com.geertenvink.Bardiche;

import java.io.IOException;
import java.io.PrintWriter;

import com.stephengware.java.glaive.Glaive;
import com.stephengware.java.glaive.GlaivePlan;
import com.stephengware.java.planware.Argument;
import com.stephengware.java.planware.ArgumentMap;
import com.stephengware.java.planware.Result;
import com.stephengware.java.planware.Search;
import com.stephengware.java.planware.io.BuildException;
import com.stephengware.java.planware.io.pddl.PDDLManager;

/** Bardiche is an extension of Glaive which ensures a protagonist will be read from
  * the problem file, and that the I/O extensions required to input such problem files and
  * to output plans in the special Bardiche format will be installed.
  */ 
public class Bardiche extends Glaive {
	
	public static final Argument<BardicheProblem> PROBLEM = new Argument.ParsedArgument<BardicheProblem>(
			Glaive.PROBLEM.name, Glaive.PROBLEM.abbreviation, BardicheProblem.class) {
		
		@Override
		protected BardicheProblem getValue(Object object, ArgumentMap arguments){
			// make sure the domain is parsed before the problem 			
			arguments.get(DOMAIN);
			return super.getValue(object, arguments);
		}
	};
	
	public static final Argument<BardicheDomain> DOMAIN = new Argument.ParsedArgument<BardicheDomain>(
			Glaive.DOMAIN.name, Glaive.DOMAIN.abbreviation, BardicheDomain.class);
	
	public ArgumentMap makeArguments() {
		ArgumentMap arguments = super.makeArguments();
		PDDLManager io = (PDDLManager) arguments.get(IO_MANAGER);
		io.install(BardicheRequirement.BARDICHE);
		io.install(new BardichePlanExtension());
		
		return arguments;
	}
	
	public void generate(ArgumentMap arguments) {
		arguments.get(PROBLEM);
		
		Search search = search(arguments);
		Result result = search.getNextPlan(arguments);
		
		BardichePlan bardichePlan = null;
		int count = 0;
		do {
			count++;
			
			if (result.getSuccess()) {
				System.out.println("step " + count);
				GlaivePlan plan = (GlaivePlan) result.getPlan();
				
				bardichePlan = new BardichePlan(plan, arguments);
				
				printPlan(arguments, bardichePlan);
				
				if (bardichePlan.complete) {
					System.out.println("the end");
				}
				else {
					System.out.println("continue");
					break;
				}
			}
		} while (!bardichePlan.complete);
		
	}
	
	private void printPlan(ArgumentMap arguments, BardichePlan bardichePlan) {
		System.out.println(bardichePlan);
		PrintWriter out = new PrintWriter(System.out);
		try {
			arguments.get(Bardiche.IO_MANAGER).write(bardichePlan, out);
		} catch (BuildException be) {
			System.out.println("build exception:");
			System.out.println(be.getMessage());
			System.out.println(be.getStackTrace());
		} catch (IOException e) {
			System.out.println("IO exception:");
			System.out.println(e.getMessage());
			System.out.println(e.getStackTrace());
		}
		out.flush();
		System.out.println();
	}
}
