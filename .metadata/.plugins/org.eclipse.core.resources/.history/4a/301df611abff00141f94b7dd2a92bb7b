package com.geertenvink.Bardiche;

import java.util.ArrayList;

import com.stephengware.java.planware.logic.Conjunction;
import com.stephengware.java.planware.logic.Disjunction;
import com.stephengware.java.planware.logic.Expression;

public class BardicheGoal {
	private ArrayList<Expression> positiveGoals = new ArrayList<Expression>();
	private ArrayList<Expression> negativeGoals = new ArrayList<Expression>();

	public BardicheGoal(Conjunction goal) {
		Disjunction positiveGoalDisjunct = (Disjunction) goal.arguments.get(0);
		Disjunction negativeGoalDisjunct = (Disjunction) goal.arguments.get(1);
		
		addArgumentsToArrayList(positiveGoalDisjunct, positiveGoals);
		addArgumentsToArrayList(negativeGoalDisjunct, negativeGoals);
	}
	
	private void addArgumentsToArrayList(Disjunction disjunct, ArrayList<Expression> list) {
		for (Expression argument : disjunct.arguments) {
			list.add(argument);
		}
	}
	
	// possible als iets helemaal waar is, of als flags in de off-stand zijn. Dus bijvoorbeeld,
	// het (dood ?character) predicaat is irreversible, dan is een goal die vraagt om
	// (not (dood paard)) alleen nog mogelijk als (dood paard) false is.
	private boolean isPossible(Expression subGoal) {
		return true;
	}
	
	public Expression getGoal() {
		return this;
	}
}
